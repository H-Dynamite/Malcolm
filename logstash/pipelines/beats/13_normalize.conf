########################
# additional normalizeation of non-network-traffic events from
#   various sources (e.g., winlog/winlogbeat/winevtlog/evtx)
#
# Copyright (c) 2025 Battelle Energy Alliance, LLC.  All rights reserved.
#######################

filter {

  if ([winlog][event_data]) {

    mutate { id => "mutate_rename_windows_eventdata"
             rename => { "[winlog][event_data][CommandLine]" => "[process][command_line]" }
             rename => { "[winlog][event_data][CurrentDirectory]" => "[process][working_directory]" }
    }

    if ([winlog][event_data][ProcessName]) {
      mutate { id => "mutate_winlogbeat_process_name"
               merge => { "[process][executable]" => "[winlog][event_data][ProcessName]" } }
    }
    if ([winlog][event_data][SubjectUserName]) {
      mutate { id => "mutate_winlogbeat_subject_user_name"
               merge => { "[related][user]" => "[winlog][event_data][SubjectUserName]" } }
    }
    if ([winlog][event_data][TargetOutboundUserName]) {
      mutate { id => "mutate_winlogbeat_target_outbound_user_name"
               merge => { "[related][user]" => "[winlog][event_data][TargetOutboundUserName]" } }
    }
    if ([winlog][event_data][TargetUserName]) {
      mutate { id => "mutate_winlogbeat_target_user_name"
               merge => { "[related][user]" => "[winlog][event_data][TargetUserName]" } }
    }

    # there is some inconsistency across windows event log providers about how to name things...
    ruby {
        id => "ruby_winlog_eventdata_process_id"
        code => "
          pids = Array.new
          tids = Array.new
          ['[winlog][event_data][CallerProcessId]',
           '[winlog][event_data][NewProcessId]',
           '[winlog][event_data][ParentProcessId]',
           '[winlog][event_data][processId]',
           '[winlog][event_data][ProcessId]',
           '[winlog][event_data][ProcessID]',
           '[winlog][event_data][SourceProcessId]',
           '[winlog][event_data][TargetProcessId]',
           '[winlog][process][pid]',
           '[evtx][Event][System][Execution_attributes]',
           '[evtx][Event][System][Execution_attributes][ProcessID]',
           '[evtx][Event][UserData][CompatibilityFixEvent][ProcessId]'].each {|fname|
            if (pidstr = event.get(fname).to_s) then
              pidint = pidstr.start_with?('0x') ? pidstr.hex : pidstr.to_i
              pids.push(pidint) if pidint > 0
            end
          }
          ['[winlog][event_data][NewThreadId]',
           '[winlog][event_data][SourceThreadId]',
           '[winlog][process][thread][id]',
           '[evtx][Event][System][Execution_attributes][ThreadID]'].each {|fname|
           if (tidstr = event.get(fname).to_s) then
             tidint = tidstr.start_with?('0x') ? tidstr.hex : tidstr.to_i
             tids.push(tidint) if tidint > 0
           end
          }
          event.set('[process][pid]', pids.uniq) unless (pids.length == 0)
          event.set('[process][thread][id]', tids.uniq) unless (tids.length == 0)
        "
    }


    # map error description/code to event.result
    if ([winlog][event_data][Error_Description]) {
      if ([winlog][event_data][Error_Description] =~ /^The operation completed successfully/) {
        mutate { id => "mutate_add_field_eventdata_result_success"
                 add_field => { "[@metadata][evtx_result]" => "Success" } }
        mutate { id => "mutate_merge_eventdata_result_success"
                 merge => { "[event][result]" => "[@metadata][evtx_result]" } }
      } else {
        mutate { id => "mutate_beats_eventdata_error_description_to_result"
                 merge => { "[event][result]" => "[winlog][event_data][Error_Description]" } }
      }
    }
    if ([winlog][event_data][Result]) {
      mutate { id => "mutate_beats_eventdata_result_to_result"
               merge => { "[event][result]" => "[winlog][event_data][Result]" } }
    }
    if ([winlog][event_data][Error_Code]) {
      mutate { id => "mutate_beats_eventdata_error_code_to_result"
               merge => { "[event][result]" => "[winlog][event_data][Error_Code]" } }
    }
    if ([winlog][event_data][error_Code]) {
      mutate { id => "mutate_beats_eventdata_error_code_lc_to_result"
               merge => { "[event][result]" => "[winlog][event_data][error_Code]" } }
    }

    if ([winlog][event_data][TimeStamp]) {
      date {
        id => "date_beats_eventdata_timestamp"
        match => [ "[winlog][event_data][TimeStamp]", "ISO8601" ]
        target => "[winlog][event_data][TimeStamp]"
      }
      mutate {
        id => "date_beats_eventdata_TimeStamp_to_timegenerated"
        copy => { "[winlog][event_data][TimeStamp]" => "[winlog][time_created]" }
      }
    }

    if ([winlog][event_data][Detection_Time]) {
      date {
        id => "date_beats_eventdata_detectiontime"
        match => [ "[winlog][event_data][Detection_Time]", "ISO8601" ]
        target => "[winlog][event_data][Detection_Time]"
      }
      if (![winlog][time_created]) {
        mutate {
          id => "date_beats_eventdata_detectiontime_to_time_created"
          copy => { "[winlog][event_data][Detection_Time]" => "[winlog][time_created]" }
        }
      }
    }

    if ([winlog][event_data][UtcTime]) {
      date {
        id => "date_beats_eventdata_utctime"
        match => [ "[winlog][event_data][UtcTime]", "yyyy-MM-dd HH:mm:ss.SSS" ]
        target => "[winlog][event_data][UtcTime]"
      }
      if (![winlog][time_created]) {
        mutate {
          id => "date_beats_eventdata_utctime_to_time_created"
          copy => { "[winlog][event_data][UtcTime]" => "[winlog][time_created]" }
        }
      }
    }

    if ([winlog][event_data][CreationUtcTime]) {
      date {
        id => "date_beats_eventdata_creationutctime"
        match => [ "[winlog][event_data][CreationUtcTime]", "yyyy-MM-dd HH:mm:ss.SSS" ]
        target => "[winlog][event_data][CreationUtcTime]"
      }
      mutate {
        id => "date_beats_eventdata_utctime_to_time_written"
        copy => { "[winlog][event_data][UtcTime]" => "[winlog][time_written]" }
      }
    }

    if ([winlog][event_data][fileTime]) {
      date {
        id => "date_beats_eventdata_filetime"
        match => [ "[winlog][event_data][fileTime]", "ISO8601" ]
        target => "[winlog][event_data][fileTime]"
      }
    }

    if ([winlog][event_data][PreviousCreationUtcTime]) {
      date {
        id => "date_beats_eventdata_previouscreationutctime"
        match => [ "[winlog][event_data][PreviousCreationUtcTime]", "yyyy-MM-dd HH:mm:ss.SSS" ]
        target => "[winlog][event_data][PreviousCreationUtcTime]"
      }
    }

    if ([winlog][event_data][BitlockerUserInputTime]) {
      date {
        id => "date_beats_eventdata_bitlocker_user_input_time"
        match => [ "[winlog][event_data][BitlockerUserInputTime]", "ISO8601" ]
        target => "[winlog][event_data][BitlockerUserInputTime]"
      }
    }

    if ([winlog][event_data][DeviceTime]) {
      date {
        id => "date_beats_eventdata_device_time"
        match => [ "[winlog][event_data][DeviceTime]", "ISO8601" ]
        target => "[winlog][event_data][DeviceTime]"
      }
    }

    if ([winlog][event_data][NewTime]) {
      date {
        id => "date_beats_eventdata_new_time"
        match => [ "[winlog][event_data][NewTime]", "ISO8601" ]
        target => "[winlog][event_data][NewTime]"
      }
    }

    if ([winlog][event_data][OldTime]) {
      date {
        id => "date_beats_eventdata_old_time"
        match => [ "[winlog][event_data][OldTime]", "ISO8601" ]
        target => "[winlog][event_data][OldTime]"
      }
    }

    # ECS -> related.user
    if ([winlog][event_data][NewTargetUserName]) {
      mutate { id => "mutate_merge_eventdata_user_newtargetusername"
               merge => { "[related][user]" => "[winlog][event_data][NewTargetUserName]" } }
    }
    if ([winlog][event_data][OldTargetUserName]) {
      mutate { id => "mutate_merge_eventdata_user_oldtargetusername"
               merge => { "[related][user]" => "[winlog][event_data][OldTargetUserName]" } }
    }
    if ([winlog][event_data][SourceUserName]) {
      mutate { id => "mutate_merge_eventdata_user_sourceusername"
               merge => { "[related][user]" => "[winlog][event_data][SourceUserName]" } }
    }
    if ([winlog][event_data][SubjectUserName]) {
      mutate { id => "mutate_merge_eventdata_user_subjectusername"
               merge => { "[related][user]" => "[winlog][event_data][SubjectUserName]" } }
    }
    if ([winlog][event_data][TargetOutboundUserName]) {
      mutate { id => "mutate_merge_eventdata_user_targetoutboundusername"
               merge => { "[related][user]" => "[winlog][event_data][TargetOutboundUserName]" } }
    }
    if ([winlog][event_data][TargetUserName]) {
      mutate { id => "mutate_merge_eventdata_user_targetusername"
               merge => { "[related][user]" => "[winlog][event_data][TargetUserName]" } }
    }
    if ([winlog][event_data][username]) {
      mutate { id => "mutate_merge_eventdata_user_username"
               merge => { "[related][user]" => "[winlog][event_data][username]" } }
    }
    if ([winlog][event_data][Detection_User]) {
      mutate { id => "mutate_merge_eventdata_user_detection_user"
               merge => { "[related][user]" => "[winlog][event_data][Detection_User]" } }
    }
    if ([winlog][event_data][ParentUser]) {
      mutate { id => "mutate_merge_eventdata_user_parentuser"
               merge => { "[related][user]" => "[winlog][event_data][ParentUser]" } }
    }
    if ([winlog][event_data][Remediation_User]) {
      mutate { id => "mutate_merge_eventdata_user_remediation_user"
               merge => { "[related][user]" => "[winlog][event_data][Remediation_User]" } }
    }
    if ([winlog][event_data][TargetUser]) {
      mutate { id => "mutate_merge_eventdata_user_targetuser"
               merge => { "[related][user]" => "[winlog][event_data][TargetUser]" } }
    }
    if ([winlog][event_data][User]) {
      mutate { id => "mutate_merge_eventdata_user_user"
               merge => { "[related][user]" => "[winlog][event_data][User]" } }
    }

    # ECS hash
    if ([winlog][event_data][Hashes]) {
      ruby {
        id => "ruby_eventdata_eventdata_hashes"
        code => "
          if hash_str = event.get('[winlog][event_data][Hashes]') then
            hash_dict = Hash[hash_str.split(',').map { |pair| pair.split('=') }]
            event.set('[process][hash][sha1]', hash_dict['SHA1']) if hash_dict.key?('SHA1')
            event.set('[process][hash][md5]', hash_dict['MD5']) if hash_dict.key?('MD5')
            event.set('[process][hash][sha256]', hash_dict['SHA256']) if hash_dict.key?('SHA256')
            event.set('[pe][imphash]', hash_dict['IMPHASH']) if hash_dict.key?('IMPHASH')
          end"
      }
      if ([process][hash][sha1]) {
        mutate { id => "mutate_merge_eventdata_related_hash_sha1"
                 merge => { "[related][hash]" => "[process][hash][sha1]" } }
      }
      if ([process][hash][md5]) {
        mutate { id => "mutate_merge_eventdata_related_hash_md5"
                 merge => { "[related][hash]" => "[process][hash][md5]" } }
      }
      if ([process][hash][sha256]) {
        mutate { id => "mutate_merge_eventdata_related_hash_sha256"
                 merge => { "[related][hash]" => "[process][hash][sha256]" } }
      }
      if ([pe][imphash]) {
        mutate { id => "mutate_merge_eventdata_related_hash_imphash"
                 merge => { "[related][hash]" => "[pe][imphash]" } }
      }
      mutate { id => "mutate_winlog_remove_eventdata_hashes"
               remove_field => [ "[winlog][event_data][Hashes]" ] }
    }

    # ECS dll
    if ([winlog][event_data][ImageLoaded] =~ /\.dll/) {
      ruby {
        id => "ruby_eventdata_imageloaded_dedoubleslash"
        path => "/usr/share/logstash/malcolm-ruby/dedoubleslash.rb"
        script_params => {
          "source" => "[winlog][event_data][ImageLoaded]"
          "target" => "[winlog][event_data][ImageLoaded]"
        }
      }
      mutate { id => "mutate_merge_eventdata_dll_path_eventdata_imageloaded"
               merge => { "[dll][path]" => "[winlog][event_data][ImageLoaded]" } }
      mutate { id => "mutate_merge_eventdata_dll_name_eventdata_imageloaded"
               merge => { "[dll][name]" => "[winlog][event_data][ImageLoaded]" } }
      mutate { id => "mutate_gsub_eventdata_dll_name_eventdata_imageloaded"
               gsub => [ "[dll][name]",  "^.*[\\]{1}", "" ] }
    }

    if ([winlog][event_data][OriginalFileName] =~ /\.dll/) {
      ruby {
        id => "ruby_eventdata_originalfilename_dedoubleslash"
        path => "/usr/share/logstash/malcolm-ruby/dedoubleslash.rb"
        script_params => {
          "source" => "[winlog][event_data][OriginalFileName]"
          "target" => "[winlog][event_data][OriginalFileName]"
        }
      }
      mutate { id => "mutate_merge_eventdata_dll_path_eventdata_originalfilename"
               merge => { "[dll][path]" => "[winlog][event_data][OriginalFileName]" } }
      mutate { id => "mutate_merge_eventdata_dll_name_eventdata_originalfilename"
               merge => { "[dll][name]" => "[winlog][event_data][OriginalFileName]" } }
      mutate { id => "mutate_gsub_eventdata_dll_name_eventdata_originalfilename"
               gsub => [ "[dll][name]",  "^.*[\\]{1}", "" ] }
    }

    if ([winlog][event_data][StartModule] =~ /\.dll/) {
      ruby {
        id => "ruby_eventdata_startmodule_dedoubleslash"
        path => "/usr/share/logstash/malcolm-ruby/dedoubleslash.rb"
        script_params => {
          "source" => "[winlog][event_data][StartModule]"
          "target" => "[winlog][event_data][StartModule]"
        }
      }
      mutate { id => "mutate_merge_eventdata_dll_path_eventdata_startmodule"
               merge => { "[dll][path]" => "[winlog][event_data][StartModule]" } }
      mutate { id => "mutate_merge_eventdata_dll_name_eventdata_startmodule"
               merge => { "[dll][name]" => "[winlog][event_data][StartModule]" } }
      mutate { id => "mutate_gsub_eventdata_dll_name_eventdata_startmodule"
               gsub => [ "[dll][name]",  "^.*[\\]{1}", "" ] }
    }

    if ([winlog][event_data][TargetFilename] =~ /\.dll/) {
      ruby {
        id => "ruby_eventdata_targetfilename_dedoubleslash"
        path => "/usr/share/logstash/malcolm-ruby/dedoubleslash.rb"
        script_params => {
          "source" => "[winlog][event_data][TargetFilename]"
          "target" => "[winlog][event_data][TargetFilename]"
        }
      }
      mutate { id => "mutate_merge_eventdata_dll_path_eventdata_targetfilename"
               merge => { "[dll][path]" => "[winlog][event_data][TargetFilename]" } }
      mutate { id => "mutate_merge_eventdata_dll_name_eventdata_targetfilename"
               merge => { "[dll][name]" => "[winlog][event_data][TargetFilename]" } }
      mutate { id => "mutate_gsub_eventdata_dll_name_eventdata_targetfilename"
               gsub => [ "[dll][name]",  "^.*[\\]{1}", "" ] }
    }

    # ECS executable
    if ([winlog][event_data][Image]) {
      mutate { id => "mutate_merge_eventdata_process_executable_eventdata_event_eventdata_image"
               merge => { "[process][executable]" => "[winlog][event_data][Image]" } }
    }
    if ([winlog][event_data][Process_Name]) {
      mutate { id => "mutate_merge_eventdata_process_executable_eventdata_event_eventdata_process_name"
               merge => { "[process][executable]" => "[winlog][event_data][Process_Name]" } }
    }
    if ([winlog][event_data][ProcessName]) {
      mutate { id => "mutate_merge_eventdata_process_executable_eventdata_event_eventdata_processname"
               merge => { "[process][executable]" => "[winlog][event_data][ProcessName]" } }
    }


  } # if winlog.event_data

}